from dotenv import load_dotenv
import os
import spotipy
import logging

from spotipy.oauth2 import SpotifyOAuth
from typing import List

# Set up basic logging configuration
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()

client_id = os.getenv("CLIENT_ID")
client_secret = os.getenv("CLIENT_SECRET")


def get_authenticated_user_id() -> str:
    """
    Authenticates with Spotify and retrieves the authenticated user's ID.

    Returns:
        str: The Spotify user ID of the authenticated user.
    """
    try:
        sp = spotipy.Spotify(auth_manager=SpotifyOAuth(
            client_id=client_id,
            client_secret=client_secret,
            redirect_uri='http://localhost:8888/callback',
            scope="playlist-modify-public"
        ))

        user_info = sp.current_user()
        logger.info("Authenticated successfully with Spotify.")
        return user_info['id']  # Return the actual user ID of the authenticated user

    except spotipy.SpotifyException as e:
        logger.error(f"Failed to authenticate with Spotify: {e}")
        raise


def create_playlist(username: str, playlist_name: str, song_data: List[str]) -> None:
    """
    Creates a Spotify playlist based on a list of songs.

    Args:
        username (str): Spotify username of account.
        playlist_name (str): Name for new playlist.
        song_data (List[str]): List of song titles with artist names in the format "Song - Artist".
    """
    try:
        # Authenticate and retrieve the user ID
        sp = spotipy.Spotify(auth_manager=SpotifyOAuth(
            client_id=client_id,
            client_secret=client_secret,
            redirect_uri='http://localhost:8888/callback',
            scope="playlist-modify-public"
        ))

        # Create a new playlist
        playlist = sp.user_playlist_create(user=username, name=playlist_name, public=True,
                                           description="Generated by Python Script")
        playlist_id = playlist['id']
        logger.info(f"Created playlist '{playlist_name}' with ID {playlist_id} for user {username}.")  # NEW

        # Initialize an empty list to store track IDs
        track_ids: List[str] = []

        # Search for each song in the input data and add its track ID to the list
        for song in song_data:
            try:
                result = sp.search(q=song, type='track', limit=1)
                if result['tracks']['items']:
                    track_id = result['tracks']['items'][0]['id']
                    track_ids.append(track_id)
                    logger.info(f"Found track '{song}' with ID {track_id}.")
                else:
                    logger.warning(f"Song '{song}' not found on Spotify.")

            except spotipy.SpotifyException as e:
                logger.error(f"Error searching for song '{song}': {e}")

        # Add tracks to the playlist if any valid track IDs were found
        if track_ids:
            sp.playlist_add_items(playlist_id, track_ids)
            logger.info(f"Added {len(track_ids)} songs to playlist '{playlist_name}'.")
        else:
            logger.warning(f"No valid tracks were found for the provided song data.")

    except spotipy.SpotifyException as e:
        logger.error(f"Error creating or populating playlist '{playlist_name}': {e}")


# Main function for testing
def main():
    # Manual input user info
    username = get_authenticated_user_id()
    playlist_name = "TEST"
    song_data: List[str] = [
        "Vampire Weekend - The Surfer",
        "Vampire Weekend - Campus",
        "Steely Dan - Deacon Blues"
    ]

    create_playlist(username, playlist_name, song_data)


if __name__ == "__main__":
    main()
